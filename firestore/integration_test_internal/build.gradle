// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
  repositories {
    mavenLocal()
    maven { url 'https://maven.google.com'  }
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:4.2.1'
    classpath 'com.google.gms:google-services:4.0.1'
  }
}

allprojects {
  repositories {
    mavenLocal()
    maven { url 'https://maven.google.com'  }
    mavenCentral()
  }
}

apply plugin: 'com.android.application'

android {
  compileOptions {
    sourceCompatibility 1.8
    targetCompatibility 1.8
  }
  compileSdkVersion 33
  ndkPath System.getenv('ANDROID_NDK_HOME')
  buildToolsVersion '30.0.2'

  sourceSets {
    main {
      jniLibs.srcDirs = ['libs']
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src/android/java']
      res.srcDirs = ['res']
    }
  }

  Properties localProperties = new Properties()
  try {
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
  } catch (FileNotFoundException e) {
    // Ignore the situation where local.properties does not exist, effectively treating it the same
    // as if it existed but was empty.
  }

  defaultConfig {
    applicationId 'com.google.firebase.cpp.firestore.testapp'
    minSdkVersion 19
    targetSdkVersion 28
    versionCode 1
    versionName '1.0'
    externalNativeBuild.cmake {
      arguments "-DFIREBASE_CPP_SDK_DIR=$gradle.firebase_cpp_sdk_dir"
      // Only build the targets that Firestore needs, instead of everything.
      targets 'firebase_firestore', 'firebase_auth', 'android_integration_test_main'
      // Add the line `abiFilter=<abi>` to `local.properties` to speed up local builds by only
      // building the required ABI, where `<abi>` is x86, x86_64, or arm64-v8a (for Mac M1).
      if (localProperties["abiFilter"] != null) {
        abiFilters localProperties["abiFilter"]
      }
    }
    multiDexEnabled true
  }
  externalNativeBuild.cmake {
    path 'CMakeLists.txt'
  }
  buildTypes {
    release {
      minifyEnabled true
      proguardFile getDefaultProguardFile('proguard-android.txt')
      proguardFile file('proguard.pro')
    }
  }
  packagingOptions {
    pickFirst 'META-INF/**/coroutines.pro'
  }
  lintOptions {
    abortOnError false
  }
}

apply from: "$gradle.firebase_cpp_sdk_dir/Android/firebase_dependencies.gradle"
firebaseCpp.dependencies {
  auth
  firestore
}

apply plugin: 'com.google.gms.google-services'

task copyIntegrationTestFiles(type:Exec) {
  // If this is running form inside the SDK directory, run the setup script.
  if (project.file('../../setup_integration_tests.py').exists()) {
    commandLine 'python3', '../../setup_integration_tests.py', project.projectDir.toString()
  }
  else {
    commandLine 'echo', ''
  }
}

build.dependsOn(copyIntegrationTestFiles)
