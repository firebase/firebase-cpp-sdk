name: Integration tests

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'CSV of Desktop, Android and/or iOS'
        default: 'Desktop'
        required: true
      apis:
        description: 'CSV of apis to build and test'
        default: 'admob,analytics,auth,database,dynamic_links,firestore,functions,instance_id,messaging,remote_config,storage'
        required: true
      operating_systems:
        description: 'CSV of VMs to run on'
        default: 'ubuntu-latest,windows-latest,macos-latest'
        required: true

jobs:
  # To feed input into the job matrix, we first need to convert to a JSON
  # list. Then we can use fromJson to define the field in the matrix for the tests job.
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix_os: ${{ steps.set-matrix-os.outputs.matrix_os }}
      matrix_platform: ${{ steps.set-matrix-os.outputs.matrix_platform }}
    steps:
    - id: set-matrix-os
      # e.g. 'ubuntu-latest,macos-latest' -> '["ubuntu-latest","macos-latest"]'
      run: |
        OS_JSON=[\"$(echo ${{ github.event.inputs.operating_systems }} | sed 's/,/","/g')\"]
        echo "::set-output name=matrix_os::${OS_JSON}"
        PLATFORM_JSON=[\"$(echo ${{ github.event.inputs.platforms }} | sed 's/,/","/g')\"]
        echo "::set-output name=matrix_platform::${PLATFORM_JSON}"
  tests:
    name: ${{ matrix.os }}-${{ matrix.target_platform }}
    needs: prepare_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.prepare_matrix.outputs.matrix_os) }}
        target_platform: ${{ fromJson(needs.prepare_matrix.outputs.matrix_platform) }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set env vars (ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: echo "::set-env name=VCPKG_TRIPLET::x64-linux"
      - name: Set env vars (macos)
        if: startsWith(matrix.os, 'macos')
        run: echo "::set-env name=VCPKG_TRIPLET::x64-osx"
      - name: Set env vars (windows)
        if: startsWith(matrix.os, 'windows')
        run: echo "::set-env name=VCPKG_TRIPLET::x64-windows-static"
      - name: Set env vars(all)
        run: echo "::set-env name=VCPKG_RESPONSE_FILE::external/vcpkg_${{ env.VCPKG_TRIPLET }}_response_file.txt"

      - name: Cache vcpkg C++ dependencies
        if: matrix.target_platform == 'Desktop'
        id: cache_vcpkg
        uses: actions/cache@v2
        with:
          path: external/vcpkg/installed
          key: dev-vcpkg-${{ env.VCPKG_TRIPLET }}-${{ hashFiles(format('{0}', env.VCPKG_RESPONSE_FILE)) }}-${{ hashFiles('.git/modules/external/vcpkg/HEAD') }}

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install SDK Desktop prerequisites
        if: matrix.target_platform == 'Desktop'
        run: |
          python scripts/gha/install_prereqs_desktop.py
          
      - name: Install SDK Android prerequisites
        if: matrix.target_platform == 'Android'
        run: |
          build_scripts/android/install_prereqs.sh

      - name: Install SDK iOS prerequisites
        if: matrix.target_platform == 'iOS'
        run: |
          build_scripts/ios/install_prereqs.sh
          
      - name: Prepare for integration tests
        run: |
          pip install -r scripts/gha/requirements.txt
          python scripts/gha/restore_secrets.py --passphrase "${{ secrets.TEST_SECRET }}"
          
      - name: Build and run integration tests
        # The set up script for Android will download the NDK here.
        env:
          NDK_ROOT: '/tmp/android-ndk-r16b'
        run: |
          python scripts/gha/build_testapps.py --t ${{ github.event.inputs.apis }} --p ${{ matrix.target_platform }} --output_directory ${{ github.workspace }} --use_vcpkg --execute_desktop_testapp --noadd_timestamp
