name: Integration tests

on:
  schedule:
    - cron: "0 9 * * *"  # 9am UTC = 1am PST / 2am PDT
  pull_request:
    types: [ labeled ]

  workflow_dispatch:
    inputs:
      platforms:
        description: 'CSV of Desktop, Android and/or iOS'
        default: 'Desktop,Android,iOS'
        required: true
      apis:
        description: 'CSV of apis to build and test'
        default: 'admob,analytics,auth,database,dynamic_links,firestore,functions,installations,instance_id,messaging,remote_config,storage'
        required: true
      operating_systems:
        description: 'CSV of VMs to run on'
        default: 'ubuntu-latest,windows-latest,macos-latest'
        required: true
      desktop_ssl_variants:
        description: 'CSV of desktop SSL variants to use'
        default: 'openssl,boringssl'
        required: true
      android_device:
        description: 'Android device model'
        default: 'flame'
      android_api:
        description: 'Android API level'
        default: '29'
      ios_device:
        description: 'iOS device model'
        default: 'iphone8'
      ios_version:
        description: 'iOS device version'
        default: '12.4'
      use_expanded_matrix:
        description: 'Use an expanded matrix? Note: above config will be ignored.'
        default: '0'
        required: true
      test_packaged_sdk:
        description: 'Optional: Packaging run # to build against?'
env:
  triggerLabelPrefix: "tests-requested: "
  triggerLabelFull: "tests-requested: full"
  triggerLabelQuick: "tests-requested: quick"
  statusLabelInProgress: "tests: in-progress"
  statusLabelFailed: "tests: failed"
  statusLabelSucceeded: "tests: succeeded"
  statusCommentIdentifier: "integration-test-status-comment"

jobs:
  check_trigger:
    ### This job only runs when the workflow was triggered by a PR getting labeled.
    ### It checks whether the label is a test-request trigger (cancelling
    ### the workflow if not), and then sets the in-progress label. It sets
    ### outputs to control the test matrix (full or quick) and to tell
    ### subsequent steps to update the labels as well.
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'labeled'
    outputs:
      should_update_labels: ${{ steps.set_outputs.outputs.should_update_labels }}
      requested_tests: ${{ steps.set_outputs.outputs.requested_tests }}
    steps:
    ### If the label isn't one of the test-request triggers, cancel the workflow.
    - name: cancel workflow if label is irrelevant
      if: ${{ !startsWith(github.event.label.name, env.triggerLabelPrefix) }}
      uses: andymckay/cancel-action@0.2
    - name: wait for above cancellation if label is irrelevant
      if: ${{ !startsWith(github.event.label.name, env.triggerLabelPrefix) }}
      run: |
        sleep 300
        exit 1  # fail out if the cancellation above somehow failed.
    ### Below this line, the label is one of the test-request triggers.
    - name: cancel previous runs on the same PR
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - name: remove triggering label
      uses: buildsville/add-remove-label@v1
      with:
        token: ${{ github.token }}
        label: "${{ github.event.label.name }}"
        type: remove
    ### Fail the workflow if the user does not have admin access to run the tests.
    - name: check if user has permission to trigger tests
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: "admin"
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - id: set_outputs
      run: |
        echo "::set-output name=should_update_labels::1"
        if [[ "${{ github.event.label.name }}" == "${{ env.triggerLabelFull }}" ]]; then
          echo "::set-output name=requested_tests::full"
        elif [[ "${{ github.event.label.name }}" == "${{ env.triggerLabelQuick }}" ]]; then
          echo "::set-output name=requested_tests::auto"
        fi
    ### Add the in-progress label and remove any previous success/fail labels.
    - name: add in-progress label
      uses: buildsville/add-remove-label@v1
      with:
        token: ${{ github.token }}
        label: "${{ env.statusLabelInProgress }}"
        type: add
    - name: remove previous success label
      uses: buildsville/add-remove-label@v1
      with:
        token: ${{ github.token }}
        label: "${{ env.statusLabelSucceeded }}"
        type: remove
    - name: remove previous failure label
      uses: buildsville/add-remove-label@v1
      with:
        token: ${{ github.token }}
        label: "${{ env.statusLabelFailed }}"
        type: remove
    - name: find old status comment, if any
      uses: peter-evans/find-comment@v1
      id: find-comment
      with:
        issue-number: ${{github.event.number}}
        body-includes: ${{ env.statusCommentIdentifier }}
        token: ${{github.token}}
    - name: delete old status comment
      if: ${{ steps.find-comment.outputs.comment-id != 0 }}
      uses: jungwinter/comment@v1
      with:
        type: delete
        comment_id: ${{ steps.find-comment.outputs.comment-id }}
        token: ${{ github.token }}
    - name: get current time for status comment
      id: get-time
      shell: bash
      run: |
        echo -n "::set-output name=time::"
        TZ=America/Los_Angeles date
    - name: add in progress status comment
      uses: phulsechinmay/rewritable-pr-comment@v0.2.1
      with:
        message: |
          ### ⏳&nbsp; Integration test in progress...
          Requested by @${{github.actor}} on commit ${{github.event.pull_request.head.sha}}
          Last updated: ${{ steps.get-time.outputs.time }}
          **[View integration test run](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})**
        GITHUB_TOKEN: ${{ github.token }}
        COMMENT_IDENTIFIER: ${{ env.statusCommentIdentifier }}

  # To feed input into the job matrix, we first need to convert to a JSON
  # list. Then we can use fromJson to define the field in the matrix for the tests job.
  prepare_matrix:
    runs-on: ubuntu-latest
    needs: check_trigger
    if: ${{ !cancelled() && !failure() }}  # Run even if check_trigger was skipped.
    outputs:
      matrix_platform: ${{ steps.export-result.outputs.matrix_platform }}
      matrix_os: ${{ steps.export-result.outputs.matrix_os }}
      matrix_ssl: ${{ steps.export-result.outputs.matrix_ssl }}
      apis: ${{ steps.export-result.outputs.apis }}
      android_device: ${{ steps.export-result.outputs.android_device }}
      android_api: ${{ steps.export-result.outputs.android_api }}
      ios_device: ${{ steps.export-result.outputs.ios_device }}
      ios_version: ${{ steps.export-result.outputs.ios_version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: false
      - name: Use expanded matrix
        if: github.event_name == 'schedule' || github.event.inputs.use_expanded_matrix == '1' || needs.check_trigger.outputs.requested_tests == 'full'
        run: |
          echo "EXPANDED_MATRIX_PARAM=-e=1" >> $GITHUB_ENV
      - name: Set auto-diff option if specified.
        if: needs.check_trigger.outputs.requested_tests == 'auto'
        run: |
          echo "Autodetecting which tests to run."
          echo "AUTO_DIFF_PARAM=--auto_diff ${{github.event.pull_request.base.sha}}" >> $GITHUB_ENV

      - id: export-result
        # e.g. 'ubuntu-latest,macos-latest' -> '["ubuntu-latest","macos-latest"]'
        run: |
          echo "::set-output name=apis::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k apis -o "${{github.event.inputs.apis}}" ${AUTO_DIFF_PARAM})"
          echo "::set-output name=matrix_platform::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${EXPANDED_MATRIX_PARAM} -k platform -o "${{github.event.inputs.platforms}}" ${AUTO_DIFF_PARAM})"
          echo "::set-output name=matrix_os::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${EXPANDED_MATRIX_PARAM} -k os -o "${{github.event.inputs.operating_systems}}" ${AUTO_DIFF_PARAM})"
          # If building against a packaged SDK, only use boringssl.
          if [[ -n "${{ github.event.inputs.test_packaged_sdk }}" ]]; then
            echo "::warning ::Downloading SDK package from previous run: https://github.com/firebase/firebase-cpp-sdk/actions/runs/${{ github.event.inputs.test_packaged_sdk }}"
            # Because the mobile tests require this value to be set to 'openssl', set it to 'openssl' here. It won't actually matter later.
            echo "::set-output name=matrix_ssl::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${EXPANDED_MATRIX_PARAM} -k ssl_lib -o openssl )"
          else
            echo "::set-output name=matrix_ssl::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${EXPANDED_MATRIX_PARAM} -k ssl_lib -o "${{github.event.inputs.desktop_ssl_variants}}" )"
          fi
          echo "::set-output name=android_device::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k android_device -o "${{github.event.inputs.android_device}}" )"
          echo "::set-output name=android_api::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k android_api -o "${{github.event.inputs.android_api}}" )"
          echo "::set-output name=ios_device::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k ios_device -o "${{github.event.inputs.ios_device}}" )"
          echo "::set-output name=ios_version::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k ios_version -o "${{github.event.inputs.ios_version}}" )"

  tests:
    name: ${{ matrix.os }}-${{ matrix.target_platform }}-${{ matrix.ssl_variant }}
    needs: [prepare_matrix, check_trigger]
    runs-on: ${{ matrix.os }}
    # Skip this if there is an empty matrix (which can happen if "auto" was set above).
    # But check cancelled() && !failure() so it runs even if check_trigger was skipped.
    if: needs.prepare_matrix.outputs.matrix_platform != '[]' && needs.prepare_matrix.outputs.apis != '' && !cancelled() && !failure()
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.prepare_matrix.outputs.matrix_os) }}
        target_platform: ${{ fromJson(needs.prepare_matrix.outputs.matrix_platform) }}
        ssl_variant: ${{ fromJson(needs.prepare_matrix.outputs.matrix_ssl) }}
        exclude:
          - os: ubuntu-latest
            target_platform: iOS
          - os: windows-latest
            target_platform: iOS
          - target_platform: iOS
            ssl_variant: boringssl
          - target_platform: Android
            ssl_variant: boringssl

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set env vars (ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: echo "VCPKG_TRIPLET=x64-linux" >> $GITHUB_ENV
      - name: Set env vars (macos)
        if: startsWith(matrix.os, 'macos')
        run: echo "VCPKG_TRIPLET=x64-osx" >> $GITHUB_ENV
      - name: Set env vars (windows)
        shell: bash
        if: startsWith(matrix.os, 'windows')
        run: echo "VCPKG_TRIPLET=x64-windows-static" >> $GITHUB_ENV
      - name: Set env vars(all)
        shell: bash
        run: echo "VCPKG_RESPONSE_FILE=external/vcpkg_${{ env.VCPKG_TRIPLET }}_response_file.txt" >> $GITHUB_ENV

      - name: Add msbuild to PATH (windows)
        if: startsWith(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Cache vcpkg C++ dependencies
        if: matrix.target_platform == 'Desktop'
        id: cache_vcpkg
        uses: actions/cache@v2
        with:
          path: external/vcpkg/installed
          key: dev-vcpkg-${{ env.VCPKG_TRIPLET }}-${{ hashFiles(format('{0}', env.VCPKG_RESPONSE_FILE)) }}-${{ hashFiles('.git/modules/external/vcpkg/HEAD') }}

      - name: Cache NDK
        id: cache_ndk
        if: matrix.target_platform == 'Android'
        uses: actions/cache@v2
        with:
          path: /tmp/android-ndk-r16b
          key: android-ndk-${{ matrix.os }}-r16b

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install SDK Desktop prerequisites
        if: matrix.target_platform == 'Desktop'
        run: |
          python scripts/gha/install_prereqs_desktop.py

      - name: Install SDK Android prerequisites
        if: matrix.target_platform == 'Android'
        shell: bash
        run: |
          build_scripts/android/install_prereqs.sh

      - name: Install SDK iOS prerequisites
        if: matrix.target_platform == 'iOS'
        run: |
          build_scripts/ios/install_prereqs.sh

      - name: Prepare for integration tests
        run: |
          pip install -r scripts/gha/requirements.txt
          python scripts/gha/restore_secrets.py --passphrase "${{ secrets.TEST_SECRET }}"

      - name: Install OpenSSL (windows)
        if: matrix.target_platform == 'Desktop' &&
            matrix.ssl_variant == 'openssl' &&
            startsWith(matrix.os, 'windows')
        run: |
          choco install openssl -r

      - name: Install OpenSSL (MacOS)
        if: matrix.target_platform == 'Desktop' &&
            matrix.ssl_variant == 'openssl' &&
            startsWith(matrix.os, 'macos')
        run: |
          brew install openssl
          # brew won't overwrite MacOS system default OpenSSL, so force it here.
          echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV

      - name: Install OpenSSL (Linux)
        if: matrix.target_platform == 'Desktop' &&
            matrix.ssl_variant == 'openssl' &&
            startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt install openssl

      - name: fetch artifact from previous run
        uses: dawidd6/action-download-artifact@v2
        if: ${{ github.event.inputs.test_packaged_sdk != '' }}
        with:
          name: 'firebase_cpp_sdk.zip'
          workflow: 'cpp-packaging.yml'
          run_id: ${{ github.event.inputs.test_packaged_sdk }}

      - name: Build integration tests
        shell: bash
        run: |
          declare -a additional_flags
          if [[ -n "${{ github.event.inputs.test_packaged_sdk }}" ]]; then
            # Building integration tests against a packaged SDK.
            mkdir downloaded_sdk
            cd downloaded_sdk
            unzip -q ../firebase_cpp_sdk.zip
            cd ..
            additional_flags+=(--packaged_sdk downloaded_sdk/firebase_cpp_sdk)
          else
            # Building integration tests against the SDK source.
            #
            # When building the SDK from source, the default SSL is openssl.
            # To build using boringssl, a cmake flag must be added:
            if [[ "${{ matrix.ssl_variant }}" == "boringssl" ]]; then
              additional_flags+=(--cmake_flag=-DFIREBASE_USE_BORINGSSL=ON)
            fi
          fi
          python scripts/gha/build_testapps.py --t ${{ needs.prepare_matrix.outputs.apis }} --p ${{ matrix.target_platform }} --output_directory "${{ github.workspace }}" --noadd_timestamp ${additional_flags[*]} --short_output_paths

      - name: Run desktop integration tests
        if: matrix.target_platform == 'Desktop' && !cancelled()
        run: |
          python scripts/gha/desktop_tester.py --testapp_dir ta
      # Workaround for https://github.com/GoogleCloudPlatform/github-actions/issues/100
      # Must be run after the Python setup action
      - name: Set CLOUDSDK_PYTHON (Windows)
        shell: bash
        if: startsWith(matrix.os, 'windows') && !cancelled()
        run: echo "CLOUDSDK_PYTHON=${{env.pythonLocation}}\python.exe" >> $GITHUB_ENV
      - name: Install Cloud SDK
        if: ${{ !cancelled() }}
        uses: google-github-actions/setup-gcloud@master
      - name: Upload Desktop Artifacts to GCS
        if: matrix.target_platform == 'Desktop' && !cancelled()
        run: |
          python scripts/gha/gcs_uploader.py --testapp_dir ta --key_file scripts/gha-encrypted/gcs_key_file.json
      - name: Run mobile integration tests
        if: matrix.target_platform != 'Desktop' && !cancelled()
        run: |
          python scripts/gha/test_lab.py --android_model ${{ needs.prepare_matrix.outputs.android_device }} --android_api ${{ needs.prepare_matrix.outputs.android_api }} --ios_model ${{ needs.prepare_matrix.outputs.ios_device }} --ios_version ${{ needs.prepare_matrix.outputs.ios_version }} --testapp_dir ta --code_platform cpp --key_file scripts/gha-encrypted/gcs_key_file.json
      - name: Prepare results summary artifact
        if: ${{ !cancelled() }}
        run: |
          cp ta/summary.log test-results-${{ matrix.os }}-${{ matrix.target_platform }}-${{ matrix.ssl_variant }}.txt
      - name: Upload results summary artifact
        uses: actions/upload-artifact@v2.2.2
        if: ${{ !cancelled() }}
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.target_platform }}-${{ matrix.ssl_variant }}
          path: test-results-${{ matrix.os }}-${{ matrix.target_platform }}-${{ matrix.ssl_variant }}.txt
      ### The below allow us to set the failure label and comment early, when the first failure
      ### in the matrix occurs. It'll be cleaned up in a subsequent job.
      - name: add failure label
        # We can do mark a failure as soon as any one test fails.
        if: ${{ needs.check_trigger.outputs.should_update_labels && failure() && !cancelled() }}
        uses: buildsville/add-remove-label@v1
        with:
          token: ${{ github.token }}
          label: "${{ env.statusLabelFailed }}"
          type: add
      - name: get current time for status comment
        id: get-time
        if: ${{ needs.check_trigger.outputs.should_update_labels && failure() && !cancelled() }}
        shell: bash
        run: |
          echo -n "::set-output name=time::"
          TZ=America/Los_Angeles date
      - name: download artifact
        uses: actions/download-artifact@v2.0.8
        if: ${{ needs.check_trigger.outputs.should_update_labels && failure() && !cancelled() }}
        with:
          # download-artifact doesn't support wildcards, but by default
          # will download all artifacts. Sadly this is what we must do.
          path: test_results
      - name: get summary of test results
        id: get-summary
        shell: bash
        if: ${{ needs.check_trigger.outputs.should_update_labels && failure() && !cancelled() }}
        run: |
          mv test_results/test-results-*/test-results-*.txt test_results || true
          echo 'SUMMARY_TABLE<<EOF' >> $GITHUB_ENV
          python scripts/gha/summarize_test_results.py --dir test_results --markdown >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: add failure status comment
        uses: phulsechinmay/rewritable-pr-comment@v0.2.1
        if: ${{ needs.check_trigger.outputs.should_update_labels && failure() && !cancelled() }}
        with:
          message: |
            ### ❌&nbsp; Integration test FAILED (but still ⏳&nbsp; in progress)
            Requested by @${{github.actor}} on commit ${{github.event.pull_request.head.sha}}
            Last updated: ${{ steps.get-time.outputs.time }}
            **[View integration test results](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})**
            ${{ env.SUMMARY_TABLE }}
          GITHUB_TOKEN: ${{ github.token }}
          COMMENT_IDENTIFIER: ${{ env.statusCommentIdentifier }}

      - name: Summarize build and test results
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          cat ta/summary.log
          if [[ "${{ job.status }}" != "success" ]]; then
            exit 1
          fi

  add_success_label:
    name: "add-success-label"
    needs: [check_trigger, tests]
    runs-on: ubuntu-latest
    if: ${{ needs.check_trigger.outputs.should_update_labels && !cancelled() && !failure() }}
    steps:
      - name: add success label
        uses: buildsville/add-remove-label@v1
        with:
          token: ${{github.token}}
          label: "${{ env.statusLabelSucceeded }}"
          type: add
      - name: get current time for status comment
        id: get-time
        shell: bash
        run: |
          echo -n "::set-output name=time::"
          TZ=America/Los_Angeles date
      - name: add success status comment
        uses: phulsechinmay/rewritable-pr-comment@v0.2.1
        with:
          message: |
            ### ✅&nbsp; Integration test succeeded!
            Requested by @${{github.actor}} on commit ${{github.event.pull_request.head.sha}}
            Last updated: ${{ steps.get-time.outputs.time }}
            **[View integration test results](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})**
          GITHUB_TOKEN: ${{ github.token }}
          COMMENT_IDENTIFIER: ${{ env.statusCommentIdentifier }}

  add_failure_label:
    name: "add-failure-label"
    needs: [check_trigger, tests]
    runs-on: ubuntu-latest
    if: ${{ needs.check_trigger.outputs.should_update_labels && !cancelled() && failure() }}
    steps:
      - name: add failure label
        uses: buildsville/add-remove-label@v1
        with:
          token: ${{ github.token }}
          label: "${{ env.statusLabelFailed }}"
          type: add
      - name: get current time for status comment
        id: get-time
        shell: bash
        run: |
          echo -n "::set-output name=time::"
          TZ=America/Los_Angeles date
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install python deps
        run: |
          python scripts/gha/install_prereqs_desktop.py

      - name: download artifact
        uses: actions/download-artifact@v2.0.8
        with:
          # download-artifact doesn't support wildcards, but by default
          # will download all artifacts. Sadly this is what we must do.
          path: test_results
      - name: get summary of test results
        shell: bash
        run: |
          mv test_results/test-results-*/test-results-*.txt test_results || true
          echo 'SUMMARY_TABLE<<EOF' >> $GITHUB_ENV
          python scripts/gha/summarize_test_results.py --dir test_results --markdown >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: add failure status comment
        uses: phulsechinmay/rewritable-pr-comment@v0.2.1
        with:
          message: |
            ### ❌&nbsp; Integration test FAILED
            Requested by @${{github.actor}} on commit ${{github.event.pull_request.head.sha}}
            Last updated: ${{ steps.get-time.outputs.time }}
            **[View integration test results](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})**
            ${{ env.SUMMARY_TABLE }}
          GITHUB_TOKEN: ${{ github.token }}
          COMMENT_IDENTIFIER: ${{ env.statusCommentIdentifier }}

  remove_in_progress_label:
    name: "remove-in-progress-label"
    needs: [check_trigger, tests]
    runs-on: ubuntu-latest
    if: ${{ needs.check_trigger.outputs.should_update_labels && !cancelled() }}
    steps:
      # Use a different token to remove the "in-progress" label,
      # to allow the removal to trigger the "Check Labels" workflow.
      - name: Generate token for GitHub API
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.WORKFLOW_TRIGGER_APP_ID }}
          private_key: ${{ secrets.WORKFLOW_TRIGGER_APP_PRIVATE_KEY }}
      - name: remove in progress label
        uses: buildsville/add-remove-label@v1
        with:
          token: ${{steps.generate-token.outputs.token}}
          label: "${{ env.statusLabelInProgress }}"
          type: remove

  summarize_results:
    name: "summarize-results"
    needs: [add_failure_label, add_success_label, remove_in_progress_label, tests]
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install python deps
        run: |
          python scripts/gha/install_prereqs_desktop.py
      - name: download artifact
        uses: actions/download-artifact@v2.0.8
        with:
          path: test_results
      - name: Summarize results into GitHub log
        run: |
          mv test_results/test-results-*/test-results-*.txt test_results || true
          python scripts/gha/summarize_test_results.py --dir test_results --github_log
      - uses: geekyeggo/delete-artifact@1-glob-support
        # Delete all of the test result artifacts.
        with:
          name: |
            test-results-*
          failOnError: false
          useGlob: true
