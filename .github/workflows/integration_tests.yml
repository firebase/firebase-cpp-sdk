name: Integration tests

on:
  schedule:
    - cron: "0 9 * * *"  # 9am UTC = 1am PST / 2am PDT
  workflow_dispatch:
    inputs:
      platforms:
        description: 'CSV of Desktop, Android and/or iOS'
        default: 'Desktop,Android,iOS'
        required: true
      apis:
        description: 'CSV of apis to build and test'
        default: 'admob,analytics,auth,database,dynamic_links,firestore,functions,installations,instance_id,messaging,remote_config,storage'
        required: true
      operating_systems:
        description: 'CSV of VMs to run on'
        default: 'ubuntu-latest,windows-latest,macos-latest'
        required: true
      desktop_ssl_variants:
        description: 'CSV of desktop SSL variants to use'
        default: 'openssl,boringssl'
        required: true
      android_device:
        description: 'Android device model'
        default: 'flame'
      android_api:
        description: 'Android API level'
        default: '29'
      ios_device:
        description: 'iOS device model'
        default: 'iphone8'
      ios_version:
        description: 'iOS device version'
        default: '12.4'
      use_expanded_matrix:
        description: 'Use an expanded matrix? Note: above config will be ignored.'
        default: '0'
        required: true  

jobs:
  # To feed input into the job matrix, we first need to convert to a JSON
  # list. Then we can use fromJson to define the field in the matrix for the tests job.
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix_platform: ${{ steps.export-result.outputs.matrix_platform }}
      matrix_os: ${{ steps.export-result.outputs.matrix_os }}
      matrix_ssl: ${{ steps.export-result.outputs.matrix_ssl }}
      apis: ${{ steps.export-result.outputs.apis }}
      android_device: ${{ steps.export-result.outputs.android_device }}
      android_api: ${{ steps.export-result.outputs.android_api }}
      ios_device: ${{ steps.export-result.outputs.ios_device }}
      ios_version: ${{ steps.export-result.outputs.ios_version }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - name: Use expanded matrix
        if: github.event_name == 'schedule' || github.event.inputs.use_expanded_matrix == '1'
        run: |
          echo "EXPANDED_MATRIX_PARAM=-e=1" >> $GITHUB_ENV
      - id: export-result
        # e.g. 'ubuntu-latest,macos-latest' -> '["ubuntu-latest","macos-latest"]'
        run: |
          echo "::set-output name=matrix_platform::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${EXPANDED_MATRIX_PARAM} -k platform -o "${{github.event.inputs.platforms}}" )"
          echo "::set-output name=matrix_os::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${EXPANDED_MATRIX_PARAM} -k os -o "${{github.event.inputs.operating_systems}}" )"
          echo "::set-output name=matrix_ssl::$( python scripts/gha/print_matrix_configuration.py -w integration_tests ${EXPANDED_MATRIX_PARAM} -k ssl_lib -o "${{github.event.inputs.desktop_ssl_variants}}" )"
          echo "::set-output name=apis::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k apis -o "${{github.event.inputs.apis}}" )"
          echo "::set-output name=android_device::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k android_device -o "${{github.event.inputs.android_device}}" )"
          echo "::set-output name=android_api::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k android_api -o "${{github.event.inputs.android_api}}" )"
          echo "::set-output name=ios_device::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k ios_device -o "${{github.event.inputs.ios_device}}" )"
          echo "::set-output name=ios_version::$( python scripts/gha/print_matrix_configuration.py -c -w integration_tests -k ios_version -o "${{github.event.inputs.ios_version}}" )"
  
  tests:
    name: ${{ matrix.os }}-${{ matrix.target_platform }}-${{ matrix.ssl_variant }}
    needs: prepare_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.prepare_matrix.outputs.matrix_os) }}
        target_platform: ${{ fromJson(needs.prepare_matrix.outputs.matrix_platform) }}
        ssl_variant: ${{ fromJson(needs.prepare_matrix.outputs.matrix_ssl) }}
        exclude:
          - os: ubuntu-latest
            target_platform: iOS
          - os: windows-latest
            target_platform: iOS
          - target_platform: iOS
            ssl_variant: boringssl
          - target_platform: Android
            ssl_variant: boringssl

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set env vars (ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: echo "VCPKG_TRIPLET=x64-linux" >> $GITHUB_ENV
      - name: Set env vars (macos)
        if: startsWith(matrix.os, 'macos')
        run: echo "VCPKG_TRIPLET=x64-osx" >> $GITHUB_ENV
      - name: Set env vars (windows)
        shell: bash
        if: startsWith(matrix.os, 'windows')
        run: echo "VCPKG_TRIPLET=x64-windows-static" >> $GITHUB_ENV
      - name: Set env vars(all)
        shell: bash
        run: echo "VCPKG_RESPONSE_FILE=external/vcpkg_${{ env.VCPKG_TRIPLET }}_response_file.txt" >> $GITHUB_ENV

      - name: Add msbuild to PATH (windows)
        if: startsWith(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Cache vcpkg C++ dependencies
        if: matrix.target_platform == 'Desktop'
        id: cache_vcpkg
        uses: actions/cache@v2
        with:
          path: external/vcpkg/installed
          key: dev-vcpkg-${{ env.VCPKG_TRIPLET }}-${{ hashFiles(format('{0}', env.VCPKG_RESPONSE_FILE)) }}-${{ hashFiles('.git/modules/external/vcpkg/HEAD') }}

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install SDK Desktop prerequisites
        if: matrix.target_platform == 'Desktop'
        run: |
          python scripts/gha/install_prereqs_desktop.py

      - name: Install SDK Android prerequisites
        if: matrix.target_platform == 'Android'
        shell: bash
        run: |
          build_scripts/android/install_prereqs.sh

      - name: Install SDK iOS prerequisites
        if: matrix.target_platform == 'iOS'
        run: |
          build_scripts/ios/install_prereqs.sh

      - name: Prepare for integration tests
        run: |
          pip install -r scripts/gha/requirements.txt
          python scripts/gha/restore_secrets.py --passphrase "${{ secrets.TEST_SECRET }}"

      - name: Install OpenSSL (windows)
        if: matrix.target_platform == 'Desktop' &&
            matrix.ssl_variant == 'openssl' &&
            startsWith(matrix.os, 'windows')
        run: |
          choco install openssl -r

      - name: Install OpenSSL (MacOS)
        if: matrix.target_platform == 'Desktop' &&
            matrix.ssl_variant == 'openssl' &&
            startsWith(matrix.os, 'macos')
        run: |
          brew install openssl
          # brew won't overwrite MacOS system default OpenSSL, so force it here.
          echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV

      - name: Install OpenSSL (Linux)
        if: matrix.target_platform == 'Desktop' &&
            matrix.ssl_variant == 'openssl' &&
            startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt install openssl

      - name: Build integration tests
        shell: bash
        run: |
          # Default SSL is openssl.
          ssl_option=
          if [[ "${{ matrix.ssl_variant }}" == "boringssl" ]]; then
            ssl_option=--cmake_flag=-DFIREBASE_USE_BORINGSSL=ON
          fi
          python scripts/gha/build_testapps.py --t ${{ needs.prepare_matrix.outputs.apis }} --p ${{ matrix.target_platform }} --output_directory "${{ github.workspace }}" --noadd_timestamp ${ssl_option}

      - name: Run desktop integration tests
        if: matrix.target_platform == 'Desktop' && !cancelled()
        run: |
          python scripts/gha/desktop_tester.py --testapp_dir testapps
      # Workaround for https://github.com/GoogleCloudPlatform/github-actions/issues/100
      # Must be run after the Python setup action
      - name: Set CLOUDSDK_PYTHON (Windows)
        shell: bash
        if: startsWith(matrix.os, 'windows') && !cancelled()
        run: echo "CLOUDSDK_PYTHON=${{env.pythonLocation}}\python.exe" >> $GITHUB_ENV
      - name: Install Cloud SDK
        if: ${{ !cancelled() }}
        uses: google-github-actions/setup-gcloud@master
      - name: Upload Desktop Artifacts to GCS
        if: matrix.target_platform == 'Desktop' && !cancelled()
        run: |
          python scripts/gha/gcs_uploader.py --testapp_dir testapps --key_file scripts/gha-encrypted/gcs_key_file.json
      - name: Run mobile integration tests
        if: matrix.target_platform != 'Desktop' && !cancelled()
        run: |
          python scripts/gha/test_lab.py --android_model ${{ needs.prepare_matrix.outputs.android_device }} --android_api ${{ needs.prepare_matrix.outputs.android_api }} --ios_model ${{ needs.prepare_matrix.outputs.ios_device }} --ios_version ${{ needs.prepare_matrix.outputs.ios_version }} --testapp_dir testapps --code_platform cpp --key_file scripts/gha-encrypted/gcs_key_file.json
      - name: Summarize build and test results
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          cat testapps/summary.log
          if [[ "${{ job.status }}" != "success" ]]; then
            exit 1
          fi
