name: Desktop Builds

on:
  push:
    branches:
      - ddb_expand_mac
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
    inputs:
      expanded_matrix:
        description: 'Use an expanded test matrix?'
        default: '0'
        required: true

env:
  CCACHE_DIR: ${{ github.workspace }}/ccache_dir

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    env:
      MATRIX_OS: 'ubuntu-latest,macos-latest,windows-latest'
      MATRIX_BUILD_TYPE: 'Release,Debug'
      MATRIX_ARCHITECTURE:  'x64,x86'
      MATRIX_MSVC_RUNTIME: 'static,dynamic'
      MATRIX_VCPKG_TRIPLET_SUFFIX: 'windows-static,windows-static-md,linux,osx' 
      MATRIX_PYTHON_VERSION: '3.7'
      MATRIX_XCODE_VERSION: '11.7,12.4'
      EXPANDED_MATRIX_OS: 'ubuntu-latest,macos-latest'
      EXPANDED_MATRIX_BUILD_TYPE: 'Release,Debug'
      EXPANDED_MATRIX_ARCHITECTURE:  'x64,x86'
      EXPANDED_MATRIX_MSVC_RUNTIME: 'msvc_runtime'
      EXPANDED_MATRIX_VCPKG_TRIPLET_SUFFIX: 'windows-static,windows-static-md,linux,osx' 
      EXPANDED_MATRIX_PYTHON_VERSION: '3.7'
      EXPANDED_MATRIX_XCODE_VERSION: '11.7,12.4'
    outputs:
      matrix_os: ${{ steps.export-result.outputs.matrix_os }}
      matrix_build_type: ${{ steps.export-result.outputs.matrix_build_type }}
      matrix_architecture: ${{ steps.export-result.outputs.matrix_architecture }}
      matrix_msvc_runtime: ${{ steps.export-result.outputs.msvc_runtime }}
      matrix_vcpkg_triplet_suffix: ${{ steps.export-result.outputs.vcpkg_triplet_suffix }}
      matrix_python_version: ${{ steps.export-result.outputs.python_version }}
      matrix_xcode_version: ${{ steps.export-result.outputs.xcode_version }}
    steps:
      - name: Use expanded matrix
        if: github.event.inputs.expanded_matrix == '1'
        run: |
          echo "MATRIX_OS=${EXPANDED_MATRIX_OS}" >> $GITHUB_ENV
          echo "MATRIX_BUILD_TYPE=${EXPANDED_MATRIX_BUILD_TYPE}" >> $GITHUB_ENV
          echo "MATRIX_ARCHITECTURE=${EXPANDED_MATRIX_ARCHITECTURE}" >> $GITHUB_ENV
          echo "MATRIX_MSVC_RUNTIME=${EXPANDED_MATRIX_MSVC_RUNTIME}" >>  $GITHUB_ENV"
          echo "MATRIX_VCPKG_TRIPLET_SUFFIX=${EXPANDED_MATRIX_VCPKG_TRIPLET_SUFFIX}" >>  $GITHUB_ENV"
          echo "MATRIX_PYTHON_VERSION=${EXPANDED_MATRIX_PYTHON_VERSION}" >> $GITHUB_ENV
          echo "MATRIX_XCODE_VERSION=${EXPANDED_MATRIX_XCODE_VERSION}" >> $GITHUB_ENV
      - id: export-result
        run: |
          OS_JSON=[\"$(echo ${{ env.MATRIX_OS }} | sed 's/,/","/g')\"]
          echo "::set-output name=matrix_os::${OS_JSON}"
          
          BUILD_TYPE_JSON=[\"$(echo ${{ env.MATRIX_BUILD_TYPE }} | sed 's/,/","/g')\"]
          echo "::set-output name=matrix_build_type::${BUILD_TYPE_JSON}"
          
          ARCHITECTURE_JSON=[\"$(echo ${{ env.MATRIX_ARCHITECTURE }} | sed 's/,/","/g')\"]
          echo "::set-output name=matrix_architecture::${ARCHITECTURE_JSON}"
          
          MSVC_RUNTIME_JSON=[\"$(echo ${{ env.MATRIX_MSVC_RUNTIME }} | sed 's/,/","/g')\"]
          echo "::set-output name=msvc_runtime::${MSVC_RUNTIME_JSON}"

          VCPKG_TRIPLET_SUFFIX_JSON=[\"$(echo ${{ env.MATRIX_VCPKG_TRIPLET_SUFFIX }} | sed 's/,/","/g')\"]
          echo "VCPKG_TRIPLET_SUFFIX_JSON: ${VCPKG_TRIPLET_SUFFIX_JSON}"
          echo "::set-output name=vcpkg_triplet_suffix::${VCPKG_TRIPLET_SUFFIX_JSON}"
          
          PYTHON_VERSION_JSON=[\"$(echo ${{ env.MATRIX_PYTHON_VERSION }} | sed 's/,/","/g')\"]
          echo "::set-output name=python_version::${PYTHON_VERSION_JSON}"
          
          XCODE_VERSION_JSON=[\"$(echo ${{ env.MATRIX_XCODE_VERSION }} | sed 's/,/","/g')\"]
          echo "XCODE_VERSION_JSON: ${XCODE_VERSION_JSON}"
          echo "::set-output name=xcode_version::${XCODE_VERSION_JSON}"
  build:
    name: ${{ matrix.os }}${{matrix.xcode_version}}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.msvc_runtime}}
    runs-on: ${{ matrix.os }}
    needs: prepare_matrix
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.prepare_matrix.outputs.matrix_os) }}
        build_type: ${{ fromJson(needs.prepare_matrix.outputs.matrix_build_type) }}
        architecture: ${{ fromJson(needs.prepare_matrix.outputs.matrix_architecture) }}
        msvc_runtime: ${{ fromJson(needs.prepare_matrix.outputs.matrix_msvc_runtime) }}
        vcpkg_triplet_suffix: ${{ fromJson(needs.prepare_matrix.outputs.matrix_vcpkg_triplet_suffix) }}
        python_version: ${{ fromJson(needs.prepare_matrix.outputs.matrix_python_version) }}
        xcode_version: ${{ fromJson(needs.prepare_matrix.outputs.matrix_xcode_version) }}
        exclude:
          # vcpkg suffix excludes
          - os: windows-latest
            vcpkg_triplet_suffix: "linux"
          - os: windows-latest
            vcpkg_triplet_suffix: "osx"
          - os: linux-latest
            vcpkg_triplet_suffix: "windows-static"
          - os: linux-latest
            vcpkg_triplet_suffix: "windows-static-md"
          - os: linux-latest
            vcpkg_triplet_suffix: "osx"
          # msvc_runtime excludes
          - os: linux-latest
            vcpkg_triplet_suffix: "dynamic"
          - os: macos-latest
            vcpkg_triplet_suffix: "dynamic"
          # architecture excluees
          - os: macos-latest
            architecture: "x86"
          # Xcode excludes
          - os: ubuntu-latest
            xcode_version: "11.7"
          - os: ubuntu-latest
            xcode_version: "12.4"
          - os: windows-latest
            xcode_version: "11.7"
          - os: windows-latest
            xcode_version: "12.4"
          #tests:
          - os: macos-latest
            architecture: "x64"
            vcpkg_triplet_suffix: "windows-static-md"
          - os: macos-latest
            architecture: "x64"
            vcpkg_triplet_suffix: "windows-static"
          - os: macos-latest
            architecture: "x64"
            vcpkg_triplet_suffix: "linux"
          


    steps:
      - name: Check expanded matrix config
        if: github.event.inputs.expanded_matrix == '1'
        run: |
          echo "Enabling expanded build and test matrix."
          echo "USE_EXPANDED_MATRIX=1" >> $GITHUB_ENV
                
      - name: Setup Xcode version (macos)
        if: runner.os == 'macOS'
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode_version }}.app/Contents/Developer

      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set env variables for subsequent steps (all)
        shell: bash
        run: |
          echo "BUILD_TYPE: ${{ matrix.build_type }}"
          echo "VCPKG_RESPONSE_FILE=external/vcpkg_custom_data/response_files/${{ matrix.architecture }}-${{ matrix.vcpkg_triplet_suffix }}.txt" >> $GITHUB_ENV
          echo "MATRIX_UNIQUE_NAME=${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.msvc_runtime }}" >> $GITHUB_ENV

      - name: Cache vcpkg C++ dependencies
        id: cache_vcpkg
        uses: actions/cache@v2
        with:
          path: external/vcpkg/installed
          key: dev-vcpkg-${{ matrix.architecture }}-${{ matrix.vcpkg_triplet_suffix }}-${{ matrix.msvc_runtime }}-${{ hashFiles(format('{0}', env.VCPKG_RESPONSE_FILE)) }}-${{ hashFiles('.git/modules/external/vcpkg/HEAD') }}

      - name: Cache ccache files
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        id: cache_ccache
        uses: actions/cache@v2
        with:
          path: ccache_dir
          key: dev-test-ccache-${{ env.MATRIX_UNIQUE_NAME }}

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: 'x64'

      - name: Install prerequisites
        run: |
          python scripts/gha/install_prereqs_desktop.py

      - name: Build SDK
        shell: bash
        run: |
          python scripts/gha/build_desktop.py --build_tests --arch "${{ matrix.architecture }}" --config "${{ matrix.build_type }}" --msvc_runtime_library "${{ matrix.msvc_runtime }}"

      - name: Stats for ccache (mac and linux)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        run: ccache -s

      - name: Print built libraries
        shell: bash
        run: |
          find build -name "*.lib"
          find build -name "*.dll"
          find build -name "*.dylib"
          find build -name "*.a"
          find build -name "*.so"

      - name: Inspect firebase libraries for cpu arch and msvc runtime.
        shell: bash
        run: |
          python scripts/gha/inspect_built_libraries.py build/
        continue-on-error: true

      - name: Prep crash support (linux)
        # Ensures directory structure is in place to capture core files on Linux.
        if: startsWith(matrix.build_type, 'Debug') && startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          echo '/tmp/cores/core.%E' | sudo tee /proc/sys/kernel/core_pattern
          sudo mkdir -p /tmp/cores/
          sudo rm -rf /tmp/cores/*

      - name: Prep crash support (mac)
        # Ensures no lingering crashes from the previous run.
        if: startsWith(matrix.build_type, 'Debug') && startsWith(matrix.os, 'macos')
        run: |
          rm -rf ~/Library/Logs/DiagnosticReports/*

      - name: Run unit tests (windows & macos)
        # TODO: Enable tests for x86 once they are all working
        if: (startsWith(matrix.os, 'windows') || startsWith(matrix.os, 'macos')) && matrix.architecture != 'x86'
        env:
          LANG: en_US
        run: |
          cd build
          ctest --repeat until-pass:3

      - name: Run unit tests (linux)
        # Linux exists as its own standalone execution step in order to invoke
        # platform-specific `ulimit` to enable crash collection.  The ulimit
        # command must be invoked in same shell instance of that runs the
        # tests.
        # TODO: Enable tests for x86 once they are all working
        if: startsWith(matrix.os, 'ubuntu') && matrix.architecture != 'x86'
        env:
          LANG: en_US
        run: |
          ulimit -c unlimited
          cd build
          sudo ctest --repeat until-pass:3

      - name: Prep bins for achive (linux)
        # Copies all of the binary files into one directory for ease in
        # archiving. Directory contents are then marked readable for the
        # archive step.
        if: failure() && startsWith(matrix.build_type, 'Debug') && ( startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos') )
        shell: bash
        run: |
          sudo rm -rf /tmp/bins/* || :
          sudo mkdir -p /tmp/bins/
          sudo rm -rf ./build/app/tests/firebase_test
          sudo cp -f ./build/*/tests/firebase* /tmp/bins
          sudo chmod -R +rwx /tmp/bins/* || :

      - name: Prep crash data for archive (linux)
        # Marks the contents of the core dump directory to be readable for the
        # archiving step on linux.
        shell: bash
        if: failure() && startsWith(matrix.build_type, 'Debug') && startsWith(matrix.os, 'ubuntu')
        run: |
          sudo chmod -R +rwx /tmp/cores/* || :

      - name: Prep crash data for archive (macos)
        # Freshly made diagnostic reports are marked as readable for
        # the archive step. Note: for some reason /tmp/cores doesn't survive
        # long enough for archiving on mac, so prep the DiagnosticReports
        # directory instead.
        shell: bash
        if: failure() && startsWith(matrix.build_type, 'Debug') && startsWith(matrix.os, 'macos')
        run: |
          sudo chmod -R +rwx ~/Library/Logs/DiagnosticReports/* || :

      - name: Archive crashes and binaries (linux)
        uses: actions/upload-artifact@v2
        if: failure() && startsWith(matrix.build_type, 'Debug') && startsWith(matrix.os, 'ubuntu')
        with:
          name: crashes-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}
          path: |
            /tmp/cores/*
            /tmp/bins/*

      - name: Archive crashes (mac)
        uses: actions/upload-artifact@v2
        if: failure() && startsWith(matrix.build_type, 'Debug') && startsWith(matrix.os, 'macos')
        with:
          name: crashes-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}-${{ matrix.xcode_version }}
          path: |
            ~/Library/Logs/DiagnosticReports/*
            /tmp/bins/*
