diff --git a/cmake/external/leveldb.cmake b/cmake/external/leveldb.cmake
index 920bf2928..c5c9cc7ee 100644
--- a/cmake/external/leveldb.cmake
+++ b/cmake/external/leveldb.cmake
@@ -24,7 +24,10 @@ if(TARGET leveldb)
   return()
 endif()
 
-set(version 1.22)
+# This version must be kept in sync with cmake/external/leveldb.cmake
+# in the firebase-cpp-sdk. If this version ever changes then make sure
+# to update leveldb.cmake in the firebase-cpp-sdk accordingly.
+set(version 1.23)
 
 ExternalProject_Get_property(snappy SOURCE_DIR)
 set(snappy_source_dir "${SOURCE_DIR}")
@@ -39,7 +42,7 @@ ExternalProject_Add(
   DOWNLOAD_DIR ${FIREBASE_DOWNLOAD_DIR}
   DOWNLOAD_NAME leveldb-${version}.tar.gz
   URL https://github.com/google/leveldb/archive/${version}.tar.gz
-  URL_HASH SHA256=55423cac9e3306f4a9502c738a001e4a339d1a38ffbee7572d4a07d5d63949b2
+  URL_HASH SHA256=9a37f8a6174f09bd622bc723b55881dc541cd50747cbd08831c2a82d620f6d76
 
   PREFIX ${PROJECT_BINARY_DIR}
 
diff --git a/Firestore/core/src/local/local_store.cc b/Firestore/core/src/local/local_store.cc
index 7685f1959..b48b4f9d2 100644
--- a/Firestore/core/src/local/local_store.cc
+++ b/Firestore/core/src/local/local_store.cc
@@ -662,15 +662,10 @@ absl::optional<bundle::NamedQuery> LocalStore::GetNamedQuery(
 
 void LocalStore::ConfigureFieldIndexes(
     std::vector<FieldIndex> new_field_indexes) {
-  auto cmp = [](const FieldIndex& left, const FieldIndex& right) {
-    return FieldIndex::SemanticCompare(left, right) ==
-           util::ComparisonResult::Ascending;
-  };
-
   // This lambda function takes a rvalue vector as parameter,
   // then coverts it to a sorted set based on the compare function above.
-  auto convertToSet = [&](std::vector<FieldIndex>&& vec) {
-    std::set<FieldIndex, decltype(cmp)> result(cmp);
+  auto convertToSet = [](std::vector<FieldIndex>&& vec) {
+    std::set<FieldIndex, FieldIndex::SemanticLess> result;
     for (auto& index : vec) {
       result.insert(std::move(index));
     }
@@ -678,7 +673,7 @@ void LocalStore::ConfigureFieldIndexes(
   };
 
   return persistence_->Run("Configure indexes", [&] {
-    return util::DiffSets<FieldIndex, decltype(cmp)>(
+    return util::DiffSets<FieldIndex, FieldIndex::SemanticLess>(
         convertToSet(index_manager_->GetFieldIndexes()),
         convertToSet(std::move(new_field_indexes)), FieldIndex::SemanticCompare,
         [this](const model::FieldIndex& index) {
diff --git a/Firestore/core/src/model/field_index.h b/Firestore/core/src/model/field_index.h
index 96353b65f..57f159e9c 100644
--- a/Firestore/core/src/model/field_index.h
+++ b/Firestore/core/src/model/field_index.h
@@ -285,6 +285,21 @@ class FieldIndex {
   /** Returns the ArrayContains/ArrayContainsAny segment for this index. */
   absl::optional<Segment> GetArraySegment() const;
 
+  /**
+   * A type that can be used as the "Compare" template parameter of ordered
+   * collections to have the elements ordered using
+   * `FieldIndex::SemanticCompare()`.
+   *
+   * Example:
+   * std::set<FieldIndex, FieldIndex::SemanticLess> result;
+   */
+  struct SemanticLess {
+    bool operator()(const FieldIndex& left, const FieldIndex& right) const {
+      return FieldIndex::SemanticCompare(left, right) ==
+             util::ComparisonResult::Ascending;
+    }
+  };
+
  private:
   friend bool operator==(const FieldIndex& lhs, const FieldIndex& rhs);
   friend bool operator!=(const FieldIndex& lhs, const FieldIndex& rhs);
diff --git a/Firestore/core/test/unit/local/leveldb_local_store_test.cc b/Firestore/core/test/unit/local/leveldb_local_store_test.cc
index 4813b9816..54f24e90b 100644
--- a/Firestore/core/test/unit/local/leveldb_local_store_test.cc
+++ b/Firestore/core/test/unit/local/leveldb_local_store_test.cc
@@ -69,12 +69,7 @@ std::unique_ptr<LocalStoreTestHelper> Factory() {
 // This lambda function takes a rvalue vector as parameter,
 // then coverts it to a sorted set based on the compare function.
 auto convertToSet = [](std::vector<FieldIndex>&& vec) {
-  auto cmp = [](const FieldIndex& left, const FieldIndex& right) {
-    return FieldIndex::SemanticCompare(left, right) ==
-           util::ComparisonResult::Ascending;
-  };
-
-  std::set<FieldIndex, decltype(cmp)> result(cmp);
+  std::set<FieldIndex, FieldIndex::SemanticLess> result;
   for (auto& index : vec) {
     result.insert(std::move(index));
   }
